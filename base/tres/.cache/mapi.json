{
    "title": "L0 - Soma de @tres inteiros",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>L0 - Soma de @tres inteiros</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h1 id=\"l0---soma-de-tres-inteiros\">L0 - Soma de <span class=\"citation\"\ndata-cites=\"tres\">@tres</span> inteiros</h1>\n<table>\n<thead>\n<tr class=\"header\">\n<th><a href=\"#a\u00e7\u00e3o\">A\u00e7\u00e3o</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n<th><a href=\"#dicas\">Dicas</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/tres/cover.jpg\"\nalt=\"Imagem meteriologica\" />\n<figcaption aria-hidden=\"true\">Imagem meteriologica</figcaption>\n</figure>\n<h3 id=\"a\u00e7\u00e3o\">A\u00e7\u00e3o</h3>\n<p>Voc\u00ea deve escrever um programa que recebe tr\u00eas n\u00fameros inteiros e\nretorna a soma desses tr\u00eas n\u00fameros.</p>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li><p>A entrada consiste de tr\u00eas linhas. Cada linha cont\u00e9m um n\u00famero\ninteiro, representando os valores a serem somados. ### Sa\u00edda</p></li>\n<li><p>A sa\u00edda deve conter um \u00fanico valor: a soma dos tr\u00eas n\u00fameros\ninteiros, seguido por uma quebra de linha.</p></li>\n</ul>\n<h3 id=\"shell\">Shell</h3>\n<pre><code>#INPUT\n2\n3\n4\n#OUTPUT\n9\n#END\n\n#INPUT\n12\n17\n24\n#OUTPUT\n53\n#END\n\n#INPUT\n-10\n-4\n23\n#OUTPUT\n9\n#END</code></pre>\n<h3 id=\"dicas\">Dicas</h3>\n<ul>\n<li>C - Quebre uma linha usando <code>\\n</code>:</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">int</span> main<span class=\"op\">()</span> <span class=\"op\">{</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    printf<span class=\"op\">(</span><span class=\"st\">&quot;</span><span class=\"sc\">%d\\n</span><span class=\"st\">&quot;</span><span class=\"op\">,</span> soma<span class=\"op\">);</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<ul>\n<li>Python - N\u00e3o h\u00e1 necessidade de quebrar a linha manualmente, pois ela\n\u00e9 quebrada automaticamente:</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb3\"><pre\nclass=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(soma)</span></code></pre></div>\n<ul>\n<li>TypeScript - N\u00e3o h\u00e1 necessidade de quebrar a linha manualmente, pois\nela \u00e9 quebrada automaticamente:</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode ts\"><code class=\"sourceCode typescript\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">console</span><span class=\"op\">.</span><span class=\"fu\">log</span>(soma)<span class=\"op\">;</span> <span class=\"op\">||</span> <span class=\"fu\">write</span>()<span class=\"op\">;</span></span></code></pre></div>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "#INPUT\n2\n3\n4\n#OUTPUT\n9\n#END\n\n#INPUT\n12\n17\n24\n#OUTPUT\n53\n#END\n\n#INPUT\n-10\n-4\n23\n#OUTPUT\n9\n#END\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {}
}
